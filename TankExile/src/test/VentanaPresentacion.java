package test;

import java.net.InetAddress;
import java.net.UnknownHostException;
import javax.swing.JOptionPane;
import paquete.Finals;
import presentacion.Conexion;
import presentacion.PrePartida;
import presentacion.VentanaControlable;

public class VentanaPresentacion extends javax.swing.JFrame {
	private static VentanaPresentacion presentacion;
	private static Conexion conexion;
	private static PrePartida prePartida;
	private VentanaControlable ventanaRemota;
	
	/** Creates new form VentanaPresentacion */
	public VentanaPresentacion() {
		initComponents();
		presentacion = this;
		try {
			this.iPPropio.setText(InetAddress.getLocalHost().getHostAddress());
		} catch (UnknownHostException ex) {
			ex.printStackTrace();
		}
		
		
	}
	public void setEstado(String estado){
		this.etiquetaEstado.setText(estado);
	}
	
	public static VentanaPresentacion getPresentacion() {
		return presentacion;
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagenTankExile = new javax.swing.JLabel();
        botonConectar = new javax.swing.JButton();
        botonCancelar = new javax.swing.JButton();
        separador = new javax.swing.JSeparator();
        sepadadorRed = new javax.swing.JPanel();
        etiquetaIPPropio = new javax.swing.JLabel();
        etiquetaIPOponente = new javax.swing.JLabel();
        iPPropio = new javax.swing.JLabel();
        iPOponente = new javax.swing.JTextField();
        separadorEstado = new javax.swing.JSeparator();
        etiquetaEstado = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TankExile - Presentación");
        setName("Ventana"); // NOI18N
        setResizable(false);
        setUndecorated(true);

        imagenTankExile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/tank.JPG"))); // NOI18N
        imagenTankExile.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        botonConectar.setLabel("Conectar");
        botonConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonConectarActionPerformed(evt);
            }
        });

        botonCancelar.setLabel("Cancelar");
        botonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarActionPerformed(evt);
            }
        });

        sepadadorRed.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración de red"));

        etiquetaIPPropio.setText("IP propio:");

        etiquetaIPOponente.setText("IP oponente:");

        iPPropio.setText("192.168.0.101");

        iPOponente.setText("192.168.0.100");
        iPOponente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iPOponenteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sepadadorRedLayout = new javax.swing.GroupLayout(sepadadorRed);
        sepadadorRed.setLayout(sepadadorRedLayout);
        sepadadorRedLayout.setHorizontalGroup(
            sepadadorRedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sepadadorRedLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sepadadorRedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sepadadorRedLayout.createSequentialGroup()
                        .addComponent(etiquetaIPPropio)
                        .addGap(54, 54, 54)
                        .addComponent(iPPropio))
                    .addGroup(sepadadorRedLayout.createSequentialGroup()
                        .addComponent(etiquetaIPOponente)
                        .addGap(38, 38, 38)
                        .addComponent(iPOponente, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)))
                .addContainerGap())
        );
        sepadadorRedLayout.setVerticalGroup(
            sepadadorRedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sepadadorRedLayout.createSequentialGroup()
                .addGroup(sepadadorRedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiquetaIPPropio)
                    .addComponent(iPPropio))
                .addGap(18, 18, 18)
                .addGroup(sepadadorRedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiquetaIPOponente)
                    .addComponent(iPOponente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        etiquetaEstado.setText("Etiqueta de estado");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(separadorEstado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                    .addComponent(separador, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                    .addComponent(imagenTankExile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sepadadorRed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botonConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(etiquetaEstado, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imagenTankExile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separador, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(botonConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sepadadorRed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(separadorEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(etiquetaEstado)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void iPOponenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iPOponenteActionPerformed
		// TODO add your handling code here:
}//GEN-LAST:event_iPOponenteActionPerformed

	private void botonConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonConectarActionPerformed
		
		
		this.conexion = Conexion.getConexion();
		// Hilo que realiza los intenetos de conexión
		Runnable hilito = new Runnable(){
			public void run(){
				botonConectar.setEnabled(false); // Se deshabilita el boton Conextar.
				iPOponente.setEnabled(false); // Se deshabilita el area donde se ingresa IP oponente.
				int intentos;
				for (intentos = 0; intentos<Finals.CANTIDAD_DE_INTENTOS_DE_CONEXION;intentos++){ // Bucle que intenta establecer conexión.
				
					String mensaje = "Intentando establecer conexión (intento "+(intentos+1)+"/"+Finals.CANTIDAD_DE_INTENTOS_DE_CONEXION+")...";
					System.out.println(mensaje);
					setEstado(mensaje); // Se visualiza el estado de la conexión.
					try{
						conexion.conectar(iPOponente.getText()); // Intento de conexión.
					}catch(Exception ex){
						System.out.println("Fallo en el intento. Intentando conexión nuevamente...");
						//ex.printStackTrace();
						try{Thread.sleep(Finals.ESPERA_CONEXION);}catch(InterruptedException r){}
					}
					if (conexion.conexionLista()) break; // Comprueba condición de salida del bucle (la conexión se ha establecido).
				}
				if (intentos==Finals.CANTIDAD_DE_INTENTOS_DE_CONEXION){
					JOptionPane.showMessageDialog(null, "No se ha podido establecer la conexión con el host remoto.");
					setEstado("Conexión no establecida.");
					iPOponente.setEnabled(true);
					botonConectar.setEnabled(true);
					return;
				}
				conexion.establecerIDs();
				dispose();
				
				prePartida = PrePartida.getPrePartida(presentacion, conexion); // Se crea una instancia de la clase PrePartida.
				
				conexion.setVentanaRemota(prePartida);
				conexion.bindearMiVentana(); // Pone a disposición la ventana de PrePartida para el host remoto (permite controlar el botón Inicio).
				System.out.println("Servidor de ventana listo.");
				
				do{
					try{
						ventanaRemota = conexion.ponerADisposicionVentanaRemota(); // Se intenta obtener la ventana PrePartida del host remoto.
					}catch(Exception ex){
						System.out.println("Fallo en el intento de conexión con la ventana remota. Intentando conexión nuevamente...");
						try{Thread.sleep(Finals.ESPERA_CONEXION);}catch(InterruptedException r){}
					}
				}while(!conexion.ventanaLista());
				System.out.println("Ventana remota a disposición.");
				prePartida.setVentanaRemota(ventanaRemota);
				
				iPOponente.setEnabled(true);
				botonConectar.setEnabled(true);

			}
		};
		(new Thread(hilito, "Hilo de representación de los intentos de conexión")).start();
		
}//GEN-LAST:event_botonConectarActionPerformed

	private void botonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarActionPerformed
	System.exit(0);
}//GEN-LAST:event_botonCancelarActionPerformed
	
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new VentanaPresentacion().setVisible(true);
				
			}
		});
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCancelar;
    private javax.swing.JButton botonConectar;
    private javax.swing.JLabel etiquetaEstado;
    private javax.swing.JLabel etiquetaIPOponente;
    private javax.swing.JLabel etiquetaIPPropio;
    private javax.swing.JTextField iPOponente;
    private javax.swing.JLabel iPPropio;
    private javax.swing.JLabel imagenTankExile;
    private javax.swing.JPanel sepadadorRed;
    private javax.swing.JSeparator separador;
    private javax.swing.JSeparator separadorEstado;
    // End of variables declaration//GEN-END:variables
	
}
